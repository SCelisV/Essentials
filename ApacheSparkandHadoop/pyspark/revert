#export PYSPARK_DRIVER_PYTHON=ipython
#PYSPARK_DRIVER_PYTHON_OPTS=ipython
#pyspark

# revert
#Pairs with Complex Values

#scelisdev03@cluster-cca175-m:~/training_materials/devsh/examples/example-data$ hdfs dfs -put orderskus.txt /devsh_loudacre/
# en el primer map, devuelvo un pairRDD donde selecciono como key el [0] y el resto como values ([1], [2]): ( [0] , ([1], [2]))
# en el segundo map hago un cast a float 
# con el flatMapValues devuelvo un pairRDD

# cat orderskus.txt
#00001 sku010:sku933:sku022
#00002 sku912:sku331
#00003 sku888:sku022:sku010:sku594
#00004 sku411
#00005 sku331:sku010

ordersRDD = sc.textFile("/devsh_loudacre/orderskus.txt"). \
map(lambda i: i.split(' ')). \
map(lambda i: ( i[0],  i[1] )) . \
flatMapValues( lambda i: i.split(':') )

ordersRDD = sc.textFile("/devsh_loudacre/orderskus.txt"). map(lambda i: i.split(' ')). map(lambda i: ( i[0],  i[1] )) . flatMapValues( lambda i: i.split(':') )

print("type(ordersRDD): ", type(ordersRDD))
for line in ordersRDD.take(2): print(line)

#---------------------------------------------------------
# Usar las siguientes funciones en el orden indicado: groupByKey , mapValues , sortByKey , y map .
# obtener un RDD cuyo contenido sea igual al fichero original.  # cat orderskus.txt

orderskusRDD = ordersRDD.groupByKey(). \
mapValues( lambda i : i ). \
sortByKey(). \
map(lambda i: ( i[0], i[1] ))

print("type(orderskusRDD): ", type(orderskusRDD))
for i in orderskusRDD.take(2): print(i)

for (x, y) in orderskusRDD.sortByKey().take(5):
   print ("\n---", x)
   for i in y: print(i)

#---------------------------------------------------------

orderskusRDD = ordersRDD.groupByKey(). mapValues( lambda i : i ). sortByKey().  map(lambda i: ( i[0], " ", i[1] ))

from pprint import pprint as pp

def printRDD( rdd, message = "RDD" ):
    print( message )
    pp( rdd.collect() )
    print()

printRDD(orderskusRDD, "RDD Result")

#---------------------------------------------------------
# A partir del siguiente fichero:

# cat orderskus.txt
#00001 sku010:sku933:sku022
#00002 sku912:sku331
#00003 sku888:sku022:sku010:sku594
#00004 sku411
#00005 sku331:sku010

ordersRDD = sc.textFile("/devsh_loudacre/orderskus.txt"). \
map(lambda i: i.split(' ')). \
map(lambda i: ( i[0],  i[1] )) . \
flatMapValues( lambda i: i.split(':') )

ordersRDD = sc.textFile("/devsh_loudacre/orderskus.txt"). map(lambda i: i.split(' ')). map(lambda i: ( i[0],  i[1] )) . flatMapValues( lambda i: i.split(':') )


print("type(ordersRDD): ", type(ordersRDD))
for line in ordersRDD.take(2): print(line)
# ordersRDD
# ('00001', 'sku010')
# ('00001', 'sku933')

#Obtener el siguiente RDD 

#"sku010 00001:00003:00005"
#"sku022 00001:00003"
#"sku331 00002:00005"
#"sku411 00004"
#"sku594 00003"
#"sku888 00003"
#"sku912 00002" 
#"sku933 00001"

# Usar las siguientes funciones en el orden indicado: map , groupByKey , mapValues , sortByKey y map.

skusorderRDD = ordersRDD. \
map(lambda i: ( i[1],  i[0] )). \
groupByKey(). \
mapValues( lambda i: ":". join(i) ). \
sortByKey(). \
map(lambda i: ( i[0] + " " + i[1] ))

print("type(skusorderRDD): ", type(skusorderRDD))
for i in skusorderRDD.take(2): print(i)

skusorderRDD = ordersRDD. map(lambda i: ( i[1],  i[0] )).groupByKey(). mapValues( lambda i: ":".join(i) ). sortByKey().  map(lambda i: ( i[0] + " " + i[1] ))

print("type(skusorderRDD): ", type(skusorderRDD))
for i in skusorderRDD.take(2): print(i)


from pprint import pprint as pp
def printRDD( rdd, message = "RDD" ):
    print( message )
    pp( rdd.collect() )
    print()

