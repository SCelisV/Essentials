//------------------
//Hands-On Exercise: Working With RDDs
//------------------
//spark-shell
spark
//scelisdev02@cca175-m:~/training_materials/devsh/exercises$ cat $DEVDATA/frostroad.txt

//scelisdev02@cca175-m:~/training_materials/devsh/exercises$ hdfs dfs -put $DEVDATA/frostroad.txt /devsh_loudacre/

val myRDD = sc.textFile("/devsh_loudacre/frostroad.txt")

//myRDD.

myRDD.count

val lines = myRDD.collect

for (line <- lines) println(line)

//scelisdev02@cca175-m:~/training_materials/devsh/exercises$ cat $DEVDATA/makes1.txt 
//scelisdev02@cca175-m:~/training_materials/devsh/exercises$ cat $DEVDATA/makes2.txt 
//scelisdev02@cca175-m:~/training_materials/devsh/exercises$ 


//scelisdev02@cca175-m:~/training_materials/devsh/exercises$ hdfs dfs -put $DEVDATA/makes*.txt /devsh_loudacre/

val makes1RDD = sc.textFile("/devsh_loudacre/makes1.txt")

for (i <- makes1RDD.collect()) println(i)

val makes2RDD = sc.textFile("/devsh_loudacre/makes2.txt")

for (i <- makes2RDD.collect()) println(i)

val allMakesRDD = makes1RDD.union(makes2RDD)

allMakesRDD.collect()

for (i <- allMakesRDD.collect()) println(i)

val distinctRDD = allMakesRDD.distinct()

for (i <- distinctRDD.collect()) println(i)

val intersectionRDD = makes1RDD.intersection(makes2RDD)

for (i <- intersectionRDD.collect()) println(i)

val subtractRDD = makes1RDD.subtract(makes2RDD)

for (i <- subtractRDD.collect()) println(i)

val zipRDD = makes1RDD.zip(makes2RDD)

for (i <- zipRDD.collect()) println(i)