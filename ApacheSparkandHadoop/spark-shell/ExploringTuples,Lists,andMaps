//------------------
//Hands-On Exercise: Exploring Tuples, Lists, and Maps
//------------------

scala> val phoneTuple = ("Titanic", "3000", "disabled", "connected")

scala> phoneTuple.getClass

scala> phoneTuple._1

scala> phoneTuple._3

scala> phoneTuple.productElement(0)

scala> phoneTuple.productElement(2)

scala> phoneTuple.productArity

scala> def getPhoneInfo = ("Titanic", "3000", "disabled", "connected")

scala> getPhoneInfo.getClass

scala> val (modName, modNum, blueStat, wifiStat) = getPhoneInfo

scala> getPhoneInfo

scala> getPhoneInfo.getClass

scala> print(

scala> val phoneList = phoneTuple.productIterator.toList

scala> phoneTuple.getClass
res82: Class[_ <: (String, String, String, String)] = class scala.Tuple4

scala> phoneList.getClass

scala> phoneTuple.
scala> phoneList.

scala> val csvStr1 = phoneList.map("\"" + _ + "\"").toString

scala> csvStr1.getClass

scala> println(csvStr1)

scala> val csvStr2 = phoneList.map("\"" + _ + "\"").mkString

scala> println(csvStr2)

scala> csvStr2.getClass

scala> val csvStr3 = phoneList.map("\"" + _ + "\"").mkString(", ")

scala> println(csvStr3)

scala> csvStr3.getClass

//(base) hadoop@sc-ubuntu-20-04-2-lts:~/0_DEVELOP__0_DEVELOP__0_DEVELOP__/Scala/IntelliJProjects/scalaPUE/src$ vi ModelToBrand.scala
//(base) hadoop@sc-ubuntu-20-04-2-lts:~/0_DEVELOP__0_DEVELOP__0_DEVELOP__/Scala/IntelliJProjects/scalaPUE/src$ scalac ModelToBrand.scala
//(base) hadoop@sc-ubuntu-20-04-2-lts:~/0_DEVELOP__0_DEVELOP__0_DEVELOP__/Scala/IntelliJProjects/scalaPUE/src$ scala ModelToBrand
//(base) hadoop@sc-ubuntu-20-04-2-lts:~/0_DEVELOP__0_DEVELOP__0_DEVELOP__/Scala/IntelliJProjects/scalaPUE/src$ cat ModelToBrand.scala
/*
object ModelToBrand {
  def main(args: Array[String]) {
      if (args.length > 0) {
         println("Model name entered: " + args(0))
      }
  }
}
*/
//(base) hadoop@sc-ubuntu-20-04-2-lts:~/0_DEVELOP__0_DEVELOP__0_DEVELOP__/Scala/IntelliJProjects/scalaPUE/src$ scala ModelToBrand 3A

//(base) hadoop@sc-ubuntu-20-04-2-lts:~/0_DEVELOP__0_DEVELOP__0_DEVELOP__/Scala/IntelliJProjects/scalaPUE/src$ scala ModelToBrand 4kk

//(base) hadoop@sc-ubuntu-20-04-2-lts:~/0_DEVELOP__0_DEVELOP__0_DEVELOP__/Scala/IntelliJProjects/scalaPUE/src$ cat Model2ToBrand.scala
/*
object Model2ToBrand {
  def main(args: Array[String]) {
      val mod2b = Map( ("1","iFruit"),("2","iFruit"),("3","iFruit"),
                       ("3A","iFruit"),("4","iFruit"),("4A","iFruit"),
                       ("5","iFruit"), ("S1","Ronin"), ("S2","Ronin"),
                       ("S3", "Ronin"), ("F01L","Sorrento"), ("F11L","Sorrento"),
                       ("F21L","Sorrento"), ("F23L","Sorrento"), ("F33LL","Sorrento"), 
                       ("F41L","Sorrento")  )
 
  }
}
*/
//(base) hadoop@sc-ubuntu-20-04-2-lts:~/0_DEVELOP__0_DEVELOP__0_DEVELOP__/Scala/IntelliJProjects/scalaPUE/src$ scalac Model2ToBrand.scala
//(base) hadoop@sc-ubuntu-20-04-2-lts:~/0_DEVELOP__0_DEVELOP__0_DEVELOP__/Scala/IntelliJProjects/scalaPUE/src$ scala Model2ToBrand 3A
//(base) hadoop@sc-ubuntu-20-04-2-lts:~/0_DEVELOP__0_DEVELOP__0_DEVELOP__/Scala/IntelliJProjects/scalaPUE/src$ scala Model2ToBrand 3
//(base) hadoop@sc-ubuntu-20-04-2-lts:~/0_DEVELOP__0_DEVELOP__0_DEVELOP__/Scala/IntelliJProjects/scalaPUE/src$ scala Model2ToBrand

//(base) hadoop@sc-ubuntu-20-04-2-lts:~/0_DEVELOP__0_DEVELOP__0_DEVELOP__/Scala/IntelliJProjects/scalaPUE/src$ cat Model3ToBrand.scala
/*
object Model3ToBrand {
  def main(args: Array[String]) {
      val mod2b = Map( ("1","iFruit"),("2","iFruit"),("3","iFruit"),
                       ("3A","iFruit"),("4","iFruit"),("4A","iFruit"),
                       ("5","iFruit"), ("S1","Ronin"), ("S2","Ronin"),
                       ("S3", "Ronin"), ("F01L","Sorrento"), ("F11L","Sorrento"),
                       ("F21L","Sorrento"), ("F23L","Sorrento"), ("F33LL","Sorrento"), 
                       ("F41L","Sorrento")  )
 
      if(mod2b.contains(args(0) )) {  
         println(" Brand is: " + mod2b(args(0)) ) 
      } else { 
         println(" Record not found ") 
      }
  }
}
*/

//(base) hadoop@sc-ubuntu-20-04-2-lts:~/0_DEVELOP__0_DEVELOP__0_DEVELOP__/Scala/IntelliJProjects/scalaPUE/src$ scala Model3ToBrand 3A

//(base) hadoop@sc-ubuntu-20-04-2-lts:~/0_DEVELOP__0_DEVELOP__0_DEVELOP__/Scala/IntelliJProjects/scalaPUE/src$ scala Model3ToBrand 4kk
/*
object Model4ToBrand {
  def main(args: Array[String]) {
      val mod2b = Map( ("1","iFruit"),("2","iFruit"),("3","iFruit"),
                       ("3A","iFruit"),("4","iFruit"),("4A","iFruit"),
                       ("5","iFruit"), ("S1","Ronin"), ("S2","Ronin"),
                       ("S3", "Ronin"), ("F01L","Sorrento"), ("F11L","Sorrento"),
                       ("F21L","Sorrento"), ("F23L","Sorrento"), ("F33LL","Sorrento"), 
                       ("F41L","Sorrento")  )
 
      if(mod2b.contains(args(0) )) {  
         println(" Brand is mod2b.contains(args(0)): " + mod2b(args(0)) ) 
      } else { 
         println(" Record not found ") 
      }

     println("mod2b.keys: " + mod2b.keys)
     val mySet = mod2b.values.toSet
     println("mod2b.values.toSet: " + mySet)
  }
}
*/
//(base) hadoop@sc-ubuntu-20-04-2-lts:~/0_DEVELOP__0_DEVELOP__0_DEVELOP__/Scala/IntelliJProjects/scalaPUE/src$ scala Model4ToBrand 3A

//(base) hadoop@sc-ubuntu-20-04-2-lts:~/0_DEVELOP__0_DEVELOP__0_DEVELOP__/Scala/IntelliJProjects/scalaPUE/src$ scala Model4ToBrand 3kk

//(base) hadoop@sc-ubuntu-20-04-2-lts:~/0_DEVELOP__0_DEVELOP__0_DEVELOP__/Scala/IntelliJProjects/scalaPUE/src$ cat Model4ToBrand.scala 
/*
object Model4ToBrand {
  def main(args: Array[String]) {
      val mod2b = Map( ("1","iFruit"),("2","iFruit"),("3","iFruit"),
                       ("3A","iFruit"),("4","iFruit"),("4A","iFruit"),
                       ("5","iFruit"), ("S1","Ronin"), ("S2","Ronin"),
                       ("S3", "Ronin"), ("F01L","Sorrento"), ("F11L","Sorrento"),
                       ("F21L","Sorrento"), ("F23L","Sorrento"), ("F33LL","Sorrento"), 
                       ("F41L","Sorrento")  )
 
      if(mod2b.contains(args(0) )) {  
         println(" Brand is mod2b.contains(args(0)): " + mod2b(args(0)) ) 
      } else { 
         println(" Record not found ") 
      }

     println("mod2b.keys: " + mod2b.keys)
     val mySet = mod2b.values.toSet
     println("mod2b.values.toSet: " + mySet)
  }
}
*/